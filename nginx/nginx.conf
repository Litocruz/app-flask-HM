# /nginx/nginx.conf

# Número de procesos worker de Nginx. 'auto' lo ajusta al número de núcleos de CPU.
worker_processes auto;

# Configuración de eventos de Nginx.
events {
    # Número máximo de conexiones simultáneas que un worker puede manejar.
    worker_connections 1024;
}

# Bloque principal de configuración HTTP.
http {
    # Incluye los tipos MIME estándar para que Nginx sepa cómo servir diferentes tipos de archivos.
    include       mime.types;
    # Tipo MIME por defecto si no se puede determinar.
    default_type  application/octet-stream;

    # Habilita el envío eficiente de archivos.
    sendfile        on;
    # Tiempo de espera para conexiones persistentes.
    keepalive_timeout  65;

    # Bloque de configuración del servidor virtual.
    server {
        # Nginx escuchará en el puerto 80 (HTTP).
        listen 80;
        # Nombre del servidor. Puedes cambiar 'localhost' a tu dominio (ej. 'tuapp.com' o '192.168.x.x').
        server_name localhost;

        # Bloque para servir archivos estáticos (CSS, JS, imágenes).
        # Todas las solicitudes que empiecen por /static/ serán manejadas aquí.
        location /static/ {
            # La ruta raíz donde Nginx buscará los archivos estáticos.
            # Asume que el directorio 'static' de tu aplicación se montará
            # en /usr/share/nginx/html/ dentro del contenedor Nginx.
            # Por ejemplo, si tu proyecto es 'mi-app/app/static',
            # y lo montas como '- ./app/static:/usr/share/nginx/html/static:ro' en docker-compose.yml.
            root /usr/share/nginx/html;
            
            # Configura la caché del navegador para los archivos estáticos.
            expires 30d;
            add_header Cache-Control "public";
        }

        # Bloque para proxyar todas las demás solicitudes a tu aplicación backend.
        # Las solicitudes que no coincidan con /static/ irán aquí.
        location / {
            # 'app' es el nombre del servicio de tu aplicación backend en Docker Compose.
            # '8000' es el puerto en el que tu aplicación backend (Node.js/Python) escucha.
            proxy_pass http://app:5000;

            # Encabezados importantes para el proxy inverso.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off; # Evita que Nginx reescriba las redirecciones del backend.
        }

        # Páginas de error personalizadas.
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Archivos de log de acceso y error.
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}
