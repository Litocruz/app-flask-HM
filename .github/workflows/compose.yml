name: Deploy con Docker Compose

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  deploy:
    #runs-on: self-hosted
    runs-on: ubuntu-latest


    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Crear archivo .env
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env

    - name: Parar servicios anteriores
      run: docker compose down -v || true

    - name: Construir servicios
      run: docker compose -f docker-compose.yml build

    - name: Levantar servicios
      run: docker compose -f docker-compose.yml up -d

    - name: Esperar a que los servicios se estabilicen
      run: sleep 15

    - name: Inicializar Base de Datos
      run: docker compose exec app flask init-db
      continue-on-error: true
      id: init_db

    - name: Mostrar logs de los contenedores si la inicialización falló
      if: steps.init_db.outcome == 'failure'
      run: docker compose logs

    - name: Verificar el resultado de la inicialización
      if: steps.init_db.outcome == 'failure'
      run: |
        echo "La inicialización de la base de datos falló."
        exit 1

    - name: Verificar app
      run: curl -f http://localhost/health
